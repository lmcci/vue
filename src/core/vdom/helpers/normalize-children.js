/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
// 如果children是多维数组 取第一层返回
// children是一个数组 如果某一项是个数组 就把这一层展开返回 只展开一层
// [1, 2, 3, [4, 5]] ==> [1, 2, 3, 4, 5]
// [1, 2, 3, [4, 5, [6, 7]]] ==> [1, 2, 3, 4, 5, [6, 7]]
export function simpleNormalizeChildren (children: any) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
export function normalizeChildren (children: any): ?Array<VNode> {
  // 如果是一个基础数据类型 直接返回文本节点
  // 如果是一个数组 遍历返回节点
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

// 判断是否是一个文本节点
function isTextNode (node): boolean {
  // node有定义  node.text有定义 node.isComment为false(不是注释节点)
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

// 根据children  循环递归创建VNode 如果children是多个层级结构 会拍平成一维
function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  const res = []
  let i, c, lastIndex, last
  // 遍历children
  for (i = 0; i < children.length; i++) {
    // 当前遍历到的元素c
    c = children[i]
    // 如果当前元素没有定义 或者是boolean类型 直接继续下次循环
    if (isUndef(c) || typeof c === 'boolean') continue
    // 上次循环的索引
    lastIndex = res.length - 1
    // 获得已经构建好的vnode最后一个 也就是上次循环创建的那一个
    last = res[lastIndex]
    //  nested
    // 多维数组的情况
    if (Array.isArray(c)) {
      if (c.length > 0) {
        // 递归调用创建vnode
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        // merge adjacent text nodes
        // 如果通过递归创建的第一个的节点和上一个都是文本节点就合并
        if (isTextNode(c[0]) && isTextNode(last)) {
          // 合并创建 并且覆盖最后一个
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
          // 删除递归生成的第一个
          c.shift()
        }
        // 把递归生成的c拍平放进res中
        res.push.apply(res, c)
      }
    } else if (isPrimitive(c)) {
      // 简单数据类型
      // 如果这次和上次都是文本节点 就合并  否则就创建一个文本节点
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        // 合并文本后覆盖上次的节点
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        // convert primitive to vnode
        // 上次遍历的不是文本节点 本次遍历的是非空字符串就创建一个新的
        res.push(createTextVNode(c))
      }
    } else {
      // c已经是一个vnode

      // 如果这次和上次都是文本节点 就合并
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        // 如果是v-for生成的节点 有tag标签名  没有定义key nestedIndex？ 生成一个默认key
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}
